package com.winga.xxl.classifier.model.parser;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import com.winga.xxl.classifier.model.IModel;
import com.winga.xxl.classifier.model.NBayesModel;

/**
 * <p>
 * CreateDate : 2014-9-12
 * </p>
 * <p>
 * CreateDate : 2014-11-15
 * </p>
 * <p>
 * This class contains the method to judge a document's category and parsing the
 * last center documents XML file generated by the KMeans cluster.
 * </p>
 * 
 * @author xiaoxiao
 * @version 1.0
 */
public class NBXmlModelParser extends DefaultHandler implements XmlModelParser {

	Map<String, Map<Long, Double>> condprob = null;
	Map<Long, Double> theCateCondprob = null;
	Map<String, Double> catePriorProb = null;

	private String cateName = null;// The title and content's flag
	private Double priorProb = null;
	private Long wordHash = null;
	private Double wordProb = null;
	private String temp = "";// Record the element's content
	private String preTag = null;// Record the element's name

	@Override
	public void startDocument() throws SAXException {
		condprob = new HashMap<String, Map<Long, Double>>();
		catePriorProb = new HashMap<String, Double>();
	}

	@Override
	public void startElement(String uri, String localName, String qName,
			Attributes attributes) throws SAXException {
		if ("category".equals(qName)) {
			theCateCondprob = new HashMap<Long, Double>();
		} else if ("categoryName".equals(qName)) {
			cateName = new String();
		} else if ("wordHash".equals(qName)) {
			wordHash = new Long(0);
		} else if ("probability".equals(qName)) {
			wordProb = new Double(0);
		}
		preTag = qName;// 将正在解析的节点名称赋给preTag
	}

	@Override
	public void endElement(String uri, String localName, String qName)
			throws SAXException {

		// Parse the relevant XML content
		if (theCateCondprob != null) {
			if ("wordProb".equals(qName)) {
				wordProb = Double.valueOf(temp).doubleValue();
				temp = "";
				// Add the the word's hash and prob into the theCateCondprob.
				if (wordHash != null && wordProb != null)
				theCateCondprob.put(wordHash,wordProb);
				wordHash = null;
				wordProb = null;
			} else if ("wordHash".equals(qName)) {
				wordHash = Long.valueOf(temp).longValue();
				temp = "";
			} else if ("categoryName".equals(qName)) {
				cateName = temp;
				temp = "";
			} else if ("categoryPriorProb".equals(qName)) {
				priorProb = Double.valueOf(temp).doubleValue();
				temp = "";
			}else if ("category".equals(qName)) {
				condprob.put(cateName, theCateCondprob);
				catePriorProb.put(cateName, priorProb);
				theCateCondprob = null;
				cateName = null;
			}
		}
		preTag = null;
	}

	@Override
	public void characters(char[] ch, int start, int length)
			throws SAXException {

		if (theCateCondprob != null) {
			String content = new String(ch, start, length);

			// if (content != null && !content.trim().equals("")
			// && !content.trim().equals("\n")) {

			if ("categoryName".equals(preTag) || "wordHash".equals(preTag)
					|| "wordProb".equals(preTag)|| "categoryPriorProb".equals(preTag)) {
				temp += content;
			}
		}
	}

	/**
	 * Use SAX to parse the model file and return the naive bayes model.
	 * <p>CreateTime : 2014-11-16
	 * @author xiaoxiao
	 * */
	public IModel parser(String modelPath) throws Exception {

		File modelFile = new File(modelPath);

		InputStream xmlStream = new FileInputStream(modelFile);
		try {
			SAXParserFactory factory = SAXParserFactory.newInstance();

			SAXParser parser = factory.newSAXParser();

			NBXmlModelParser handler = new NBXmlModelParser();
			parser.parse(xmlStream, handler);
			xmlStream.close();

			IModel model = new NBayesModel(handler.condprob, handler.catePriorProb);

			return model;
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("Error in the naive bayes XML model parser.");
		return null;
	}

	/**
	 * Model parser for the HDFS system.
	 * @CreateTime : 2015-2-4
	 * @author Xiaoliable
	 * */
	@Override
	public IModel hdfsParser(String xmlModelFilePath) throws Exception {
			
		Configuration conf = new Configuration();
		FileSystem hdfs = FileSystem.get(URI.create(xmlModelFilePath), conf);
	
		InputStream xmlStream = hdfs.open(new Path(xmlModelFilePath));
		try {
			SAXParserFactory factory = SAXParserFactory.newInstance();
	
			SAXParser parser = factory.newSAXParser();
	
			NBXmlModelParser handler = new NBXmlModelParser();
			parser.parse(xmlStream, handler);
			xmlStream.close();
	
			IModel model = new NBayesModel(handler.condprob, handler.catePriorProb);
	
			return model;
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("Error in the naive bayes XML model parser.");
		return null;
	}
}
